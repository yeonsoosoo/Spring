<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- 자동생성 패키지안에 있는 controller 자동으로 실행 시켜준다. -->
	<!-- <context:component-scan base-package="com.korea.testdi" /> -->
	
	<!-- BoardController 수동 생성 -->
	<!-- 자동생성을 하는 경우 생성자 파라미터나 setter 메서드를 호출하는 것이 불가능 하므로
		생성자나 setter로 받아야 할 데이터가 있으면 자동이 아닌 수동으로 컨트롤러를 생성해줘야 한다. -->
		<beans:bean class="com.korea.testdi.BoardController">
		<!-- 생성자 인젝션을 통해 컨트롤러에 값 추가하기 -->
		<!-- <beans:constructor-arg ref="serviceBean"/> -->
			
		<!-- setter 인젝션을 통해 컨트롤러에 값 추가하기 -->
			<beans:property name="service" ref="serviceBean"/>
		</beans:bean>
		
	
	
	
</beans:beans>
